Array
1. Euclidean Algoritm - An efficient method to compute the Greatest Common Divisor (GCD) of two integers.
        Given two numbers a and 𝑏(𝑎 > 𝑏 ), repeatedly subtract b from a or 
  use 𝑎%𝑏 until the remainder is 0. The last non-zero remainder is the GCD.
  static int gcd(int a, int b)
	{
		if(b==0)
			return a;

		return gcd(b, a % b);
	}
2. Moore's voting algorithm - find majority element in array
	This is a two-step process:
	The first step gives the element that may be the majority element in the array. If there is a majority element in an array, then this step will definitely return majority element, otherwise, it will return candidate for majority element.
	Check if the element obtained from the above step is the majority element. This step is necessary as there might be no majority element. 
	Time Complexity: O(n), As two traversal of the array, is needed, so the time complexity is linear.
	Auxiliary Space: O(1), As no extra space is required.

	static int findMajority(int arr[], int n)
    {
    	int res = 0, count = 1;
    	for(int i = 1; i < n; i++)
    	{
    		if(arr[res] == arr[i])
    			count++;
    		else 
    			count --;

    		if(count == 0)
    		{
    			res = i; count = 1;
    		}
    	}
    	count = 0;
    	for(int i = 0; i < n; i++)
    		if(arr[res] == arr[i])
    			count++;
    	if(count <= n /2)
    		res = -1;
    	return res; 
    }

3. Window sliding technique -

4. Prefix sum technique - 
	Given n ranges. find maximum occuring element in the ranges.
	 static int maxOcc(int L[], int R[], int n){	
	    	int arr[] = new int[1000];
	    	for(int i = 0; i < n; i++){
	    		arr[L[i]]++;
	    		arr[R[i] + 1]--;
	    	}

	    	int maxm = arr[0], res = 0;
	    	for(int i = 1; i < 1000; i++){
	    		arr[i] += arr[i - 1];
	    		if(maxm < arr[i]){
	    			maxm = arr[i];
	    			res = i;
	    		}
	    	}
	    	return res;
    }
    public static void main(String args[]){ 
       int L[] = {1, 2, 3}, R[] = {3, 5, 7}, n = 3;
      System.out.println(maxOcc(L, R, n)); 
    } 

5. Kedans algorithm - 


