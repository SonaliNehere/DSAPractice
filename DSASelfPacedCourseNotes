Array
1. Euclidean Algoritm - An efficient method to compute the Greatest Common Divisor (GCD) of two integers.
        Given two numbers a and 𝑏(𝑎 > 𝑏 ), repeatedly subtract b from a or 
  use 𝑎%𝑏 until the remainder is 0. The last non-zero remainder is the GCD.
  static int gcd(int a, int b)
	{
		if(b==0)
			return a;

		return gcd(b, a % b);
	}
2. Moore's voting algorithm - find majority element in array
	This is a two-step process:
	The first step gives the element that may be the majority element in the array. If there is a majority element in an array, then this step will definitely return majority element, otherwise, it will return candidate for majority element.
	Check if the element obtained from the above step is the majority element. This step is necessary as there might be no majority element. 
	Time Complexity: O(n), As two traversal of the array, is needed, so the time complexity is linear.
	Auxiliary Space: O(1), As no extra space is required.

	static int findMajority(int arr[], int n)
    {
    	int res = 0, count = 1;
    	for(int i = 1; i < n; i++)
    	{
    		if(arr[res] == arr[i])
    			count++;
    		else 
    			count --;

    		if(count == 0)
    		{
    			res = i; count = 1;
    		}
    	}
    	count = 0;
    	for(int i = 0; i < n; i++)
    		if(arr[res] == arr[i])
    			count++;
    	if(count <= n /2)
    		res = -1;
    	return res; 
    }

3. Window sliding technique -

4. Prefix sum technique - 
	Given n ranges. find maximum occuring element in the ranges.
	 static int maxOcc(int L[], int R[], int n){	
	    	int arr[] = new int[1000];
	    	for(int i = 0; i < n; i++){
	    		arr[L[i]]++;
	    		arr[R[i] + 1]--;
	    	}

	    	int maxm = arr[0], res = 0;
	    	for(int i = 1; i < 1000; i++){
	    		arr[i] += arr[i - 1];
	    		if(maxm < arr[i]){
	    			maxm = arr[i];
	    			res = i;
	    		}
	    	}
	    	return res;
    }
    public static void main(String args[]){ 
       int L[] = {1, 2, 3}, R[] = {3, 5, 7}, n = 3;
      System.out.println(maxOcc(L, R, n)); 
    } 

5. Kedans algorithm - 
	Maximum Subarray Sum – Kadane’s Algorithm

6. Two Pointer Approach - 
	Find pair of given sum in sorted array

7. Sorting Technique - 
	Bubble sort - Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and
		swaps them if they are in the wrong order. This process is repeated until the list is sorted. So one by one last element 
		will be sort or we can say that maximum elemnt will be placed at last. 
		This process "bubbles" the largest (or smallest) element to its correct position in each pass.
		Stable?: Yes.
		Usage: Easy to implement, but inefficient for large datasets.

	Selection sort - Selection Sort is a comparison-based sorting algorithm that repeatedly selects the smallest (or largest) 
		element from the unsorted part of the array and places it at the correct position in the sorted part.
		Stable?: No.
		Usage: Simple to implement, good for small datasets.

	Insertion sort - 
		Insertion Sort is a comparison-based sorting algorithm that builds the final sorted array one element at a time by 
			picking elements from the unsorted part and placing them in their correct position in the sorted part.
		Stable?: Yes.
		Usage: Efficient for small or nearly sorted datasets.

	Merge sort - Merge Sort is a divide-and-conquer sorting algorithm that splits the array into halves, recursively sorts each half,
		and then merges the sorted halves to produce the final sorted array.
		Stable?: Yes.
		Usage: Suitable for large datasets and guaranteed efficiency across cases.

	Quick sort - Quick Sort is a divide-and-conquer sorting algorithm that selects a "pivot" element, partitions the array into two
		subarrays based on the pivot (elements smaller than the pivot on one side and larger on the other), and recursively sorts
		the subarrays.
		Time Complexity: Best and Average case: 𝑂(𝑛log⁡𝑛)
				Worst case (when partitioning is unbalanced): 𝑂(𝑛2)
		Space Complexity: O(logn) (for recursion stack in the best/average case).
		Stable?: No.
		Usage: Very efficient for large datasets, especially with good pivot selection.

		Lomuto Partition : The Lomuto partition scheme is a method used in quicksort to partition an array. It selects a pivot
			(commonly the last element of the array) and rearranges the elements such that all elements smaller than the
			pivot come before it and all greater elements come after it.
			e.g. kth smallest element, sort array with two types of elements

		Hoare Partition : The Hoare partition scheme is another method used in quicksort to partition an array. It uses two 
			pointers: one starting from the beginning and the other from the end, moving inward until they meet.
			e.g. sort array with two types of elements
		



